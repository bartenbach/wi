#!/bin/bash 
#
#  wi - a lightweight network utility for *nix
#  Copyright (C) 2012 Blake Bartenbach
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#-----------
# Todo list
#-----------
#TODO add hidden option to cli?
# TODO Connectivity testing daemon? auto-reconnect?

#-----------
# Changelog
#-----------
# Profiles now respect the hidden option.  true/false

#------------------
# Global Variables
#------------------
declare -r VERSION='0.1.3-indev'
declare -r WI_HOME='/etc/wi'
declare -r WI_CONF="$WI_HOME/wi.conf"
declare -r WI_PROFILE_DIR="$WI_HOME/profile"
declare -r WI_PROFILE_EXAMPLE="$WI_HOME/example"

#------------
# Exit codes
#------------
declare -i -r NOT_ROOT=10    
declare -i -r INTERFACE_NOT_FOUND=15       
declare -i -r NO_ARGUMENTS=20             
declare -i -r MISSING_ARGUMENTS=25       
declare -i -r UNKNOWN_ARGUMENT=27       
declare -i -r NO_CONNECTION=30
declare -i -r PROFILE_NOT_FOUND=35
declare -i -r CANNOT_SET_INTERFACE_DOWN=40  
declare -i -r CANNOT_ASSOCIATE_WITH_ESSID=50
declare -i -r CANNOT_SET_INTERFACE_UP=60   
declare -i -r CANNOT_START_DHCPCD=65      
declare -i -r NETWORK_NOT_FOUND=70       
declare -i -r CANNOT_SET_WEP_KEY=90     
declare -i -r IWLIST_SCAN_FAILED=100 

#----------------------
# Connection Variables
#----------------------
CONNECTION_TYPE='' # wired-dhcp/wireless-wpa/wireless-wep
DESCRIPTION=''     # not parsed, optional
iface=''           # interface
essid=''           # essid
enc=''             # encryption open/wpa/wep
ip=''              # static ip
hidden=''          # hidden essid

#------
# Main
#------
# $@ The arguments to parse
main() {
  check_config
  parse_arguments "$@"
}

#-------
# Usage
#-------
# $1 - The exit code to exit with
echo_usage() {
  echo -e "Usage: wi [arguments]"
  echo -e "  -a, --wpa interface essid pass  Connect to a WPA secured network using the"
  echo -e "                                  password 'pass' "
  echo -e "  -d, --disconnect                Disconnect active network connection"
  echo -e "  -e, --wep interface essid pass  Connect to a WEP secured network using the"
  echo -e "                                  password 'pass'"
  echo -e "  -h, --help                      Show this menu"
  echo -e "  -o, --open interface essid      Connect to an open or unsecured wireless"
  echo -e "                                  network via dhcp"
  echo -e "  -p, --profile filename          Connect using the following profile"
  echo -e "  -s, --scan interface            Scan for wireless networks with interface"
  echo -e "  -t, --test                      Check for a current internet connection"
  echo -e "  -w, --wired interface           Connect to a wired network using interface"
  echo -e "                                  via dhcp "
  echo -e "  --version                       Print the version of this program"
  exit $1
}

# $1 - The option that was unknown
unknown_option() {
  echo "Unknown option: $1"
  echo_usage $UNKNOWN_ARGUMENT
}

function echo_version {
  echo -e "v$VERSION"
}

function init_color {
  red='\e[0;31m'
  green='\e[0;32m'
  yellow='\e[0;33m'
  reset='\e[0m'  
}

#-----------------
# Parse arguments
#-----------------
# $@ - The arguments to parse
parse_arguments() {
  while :
    do
      case $1 in
        -a | --wpa        ) connect_wireless_wpa "$@"  ;;
        -d | --disconnect ) disconnect "$@"            ;;
        -e | --wep        ) connect_wireless_wep "$@"  ;;
        -h | --help       ) echo_usage 0               ;;
        -o | --open       ) connect_wireless_open "$@" ;;
        -p | --profile    ) handle_profile "$@"        ;;
        -s | --scan       ) scan "$@"                  ;;
        -t | --test       ) test_connection            ;;
        -w | --wired      ) connect_wired "$@"         ;;
        --version         ) echo_version               ;;
        -*                ) unknown_option "$1"        ;;
        *                 ) echo_usage $NO_ARGUMENTS   ;;
      esac
    done
}

function exit_args {
  echo -e "$yellow[Missing argument]$reset"
  echo_usage $MISSING_ARGUMENTS
}

# $1 - The interface
# $2 - The ESSID
# $3 - The encrytion key
assign_arguments() {
  iface=$2
  essid=$3
  enc=$4
}

#---------------------
# Interface functions
#---------------------
set_interface_down() {
  ip l s "$iface" down &>/dev/null
  check_exit $CANNOT_SET_INTERFACE_DOWN
}

set_interface_up() {
  ip l s "$iface" up &>/dev/null
  check_exit $CANNOT_SET_INTERFACE_UP
}

associate_with_essid() {
  iwconfig "$iface" essid "$essid" &>/dev/null
  check_exit $CANNOT_ASSOCIATE_WITH_ESSID
}

start_dhcpcd() {
  dhcpcd -K -A -q "$iface" &>/dev/null
  if [[ $? -gt 1 ]];then
    echo -e "$red[Error] dhcpcd exited $?"
    exit $CANNOT_START_DHCPCD
  fi
}

kill_dhcpcd() {
  pkill -9 dhcpcd &>/dev/null
  rm /run/dhcpcd-$iface.pid &>/dev/null
}

set_wep_encryption() {
  iwconfig "$iface" key "$enc" &>/dev/null
  check_exit $CANNOT_SET_WEP_KEY
}

isUp() {
  `ip link show up | grep "$iface" &>/dev/null`
  if [[ $? -ne 0 ]];then
    set_interface_up
    sleep 1
  fi
}

ping_check() {
#  ping -c1 -W1 google.com &>/dev/null
  ping -c1 -W1 $(route -n | grep 'UG[ \t]' | awk '{print $2}') &>/dev/null
}

#---------
# Profile
#---------
# $1 The profile to start
handle_profile() {
  ensure_root
  PROFILE="$2"
  validate_profile $PROFILE
}

validate_profile() {
  if [[ -f "$WI_PROFILE_DIR/$PROFILE" ]]; then
    source "$WI_PROFILE_DIR/$PROFILE"
    profile_type
  else
    echo -e "$red[Cannot find $yellow$WI_PROFILE_DIR/$PROFILE$red]$reset"
    exit $PROFILE_NOT_FOUND
  fi
}

function profile_type {
  case $CONNECTION_TYPE in
    wireless-wpa  ) connect_wireless_wpa X $INTERFACE $ESSID $ENCRYPTION_KEY ; break ;;
    wireless-open ) connect_wireless_open X $INTERFACE $ESSID ; break ;;
    wired         ) connect_wired X $INTERFACE ; break ;;
  esac
}

function wireless-wpa_handler {
  verify_iface_essid_enc

}

#------
# Test
#------
test_connection() {
  ping_check
  if [[ $? -eq 0 ]];then
    echo -e "$green[Connected]$reset"
  else
    echo -e "$yellow[No connection]$reset"
  fi
  exit 0
}

#------
# Scan
#------
scan() {
  assign_arguments "$@"
  verify_iface
  ensure_root
  isUp
  echo -e "$green[Scanning for networks with $yellow$iface$green]$reset"
  iwlist $iface scan | grep ESSID
  # TODO this is totally fucked up
  # this needs to iterate through them one by one and avoid printing empty strings
  # it needs to print out encryption details, and probably some other important data.
  # it should also print nothing if the scan has failed
  check_scan
}

#------------
# Disconnect
#------------
# TODO Should this accept an interface, profile, or should I try to detect this ?
function disconnect {
  kill_dhcpcd
}

#--------------------
# Configuration file
#--------------------
check_config() {
  if [[ $EUID -ne 0 && ! -f /etc/wi ]]; then
    echo ""
    echo -e "$red[Please run wi as root to create configuration files]$reset"
    echo ""
    return
  elif [[ -r $WI_CONF ]]; then
    . $WI_CONF
    [[ $color == true ]] && init_color
  else 
    mkdir -p $WI_HOME
    mkdir -p $WI_PROFILE_DIR
    touch $WI_CONF
    touch $WI_PROFILE_EXAMPLE
    write_default_config
    echo -e "$green[Created new configuration file at $WI_CONF]$reset"
  fi
}

write_default_config() {
  write "#"
  write "# wi.conf - wi configuration file"
  write "#"
  write ""
  write "# output color? true/false"
  write 'color="false"'
  write ""
  write "# vim : set ft=sh ts=2 sw=2 et:"
}

write() {
  echo "$1" >> "$WI_CONF"
}

#------------
# Validation
#------------
ensure_root() {
  if [[ $EUID -ne 0 ]];then
    echo -e "$yellow[You must be root to manage network interfaces]$reset"
    exit $NOT_ROOT
  fi
}

validate_essid() {
  [[ $hidden == "true" ]] && return
  isUp
  iwlist $iface scan | grep "$essid"
  [[ $? -eq 0 ]] && return
  echo -e "$red[Network \"${yellow}$essid${red}\" not found]$reset"
  exit $NETWORK_NOT_FOUND
}

validate_interface() {
  ip link show dev "$iface" &>/dev/null
  [[ $? -eq 0 ]] && return
  echo -e "$red[Network interface \"${yellow}$iface$red\" not detected]$reset"
  exit $INTERFACE_NOT_FOUND
}

verify_args() {
  echo "Could this be done better?" # see 3 functions below.
}

verify_iface(){
  [[ -z "$iface" ]] && exit_args
}

verify_iface_essid() {
  [[ -z "$iface" ]] || [[ -z "$essid" ]] && exit_args
}

verify_iface_essid_enc() {
  [[ -z "$iface" ]] || [[ -z "$essid" ]] || [[ -z "$enc" ]] && exit_args
}

#--------
# Checks
#--------
check_connection() {
  ping_check
  if [[ $? -eq 0 ]];then
    echo -e "$green[Connected to $essid]$reset" && exit 0
  else
    return $NO_CONNECTION
  fi
}

check_exit() {
  if [[ $? -ne 0 ]];then
    echo -e "$red[Error] exit: $yellow$1$reset" && exit $1
  fi
}

check_scan() {
  if [[ $? -eq 0 ]];then
    echo -e "$green[Scan complete]$reset" && exit 0
  fi
  echo -e "$red[Scan failed]$reset" && exit $IWLIST_SCAN_FAILED 
}

#--------------------
# Retry to get an IP
#--------------------
dhcp_persist() {
  local -i j=1
  while (( $j < 6 ))
    do
      echo -e "$yellow[Failed to lease an IP]$reset"
      echo -e "$green[Retrying ($j/5)]$reset"
      retry_wireless_dhcp
      [[ $? -eq 0 ]] && exit 0
      ((j+=1))
    done
  echo -e "$red[Unable to lease IP]$reset"
  exit $NO_CONNECTION
}

#------------------------------
# Generic connection functions
#------------------------------
reset_environment() {
  set_interface_down
  kill_dhcpcd
}

retry_if_needed() {
  if [[ $? -eq $NO_CONNECTION ]];then
    dhcp_persist
  else
    echo -e "$red[Error] dhcpcd error. exit: $?$reset"
    exit $cannot_start_dhcpcd
  fi
}

generic_wireless() {
  ensure_root
  validate_interface
  echo -e "$green[Scanning]$reset" && validate_essid
  echo -e "$green[Resetting environment]$reset" && reset_environment
  sleep 1
  echo -e "$green[Associating with $essid]$reset" && associate_with_essid
  sleep 1
}

#--------------------------
# Wireless dhcp connection
#--------------------------
connect_wireless_open() {
  assign_arguments "$@"
  echo $essid
  verify_iface_essid
  generic_wireless
  echo -e "$green[Putting $iface up]$reset" && set_interface_up
  sleep 1
  echo -e "$green[Acquiring IP address]$reset" && start_dhcpcd
  check_connection
  retry_if_needed
}

retry_wireless_dhcp() {
  reset_environment
  sleep 1
  associate_with_essid
  sleep 1
  set_interface_up
  sleep 1
  start_dhcpcd
  check_connection
  return $?
}

#-------------------------
# Wireless WEP connection
#-------------------------
connect_wireless_WEP() {
  assign_arguments "$@"
  verify_iface_essid_enc
  generic_wireless
  echo -e "$green[Setting WEP encyption]$reset" && set_wep_encryption
  sleep 1
  echo -e "$green[Putting $iface up]$reset" && set_interface_up
  sleep 1
  echo -e "$green[Acquiring IP address]$reset" && start_dhcpcd
  sleep 1
  test_connection
}

#-------------------------
# Wireless WPA connection
#-------------------------
connect_wireless_wpa() {
  assign_arguments "$@"
  verify_iface_essid
  generic_wireless
  set_wpa_key
  start_wpa_supplicant
  sleep 1
  set_interface_up
  sleep 1
  echo -e "$green[Acquiring IP address]$reset"
  start_dhcpcd
  check_connection
  retry_if_needed
}

set_wpa_key() { #//TODO nice embarassing fail here...
  [[ -r /etc/wpa_supplicant.conf ]] || touch /etc/wpa_supplicant.conf
  cat /etc/wpa_supplicant.conf | grep $essid &>/dev/null
  if [[ $? != 0 ]];then
    if [[ -z $enc ]];then
      echo -e "$yellow[Encryption key for $essid not found]$reset"
      echo -e "$yellow[Please enter the encryption key for $essid]$reset"
      wpa_passphrase $essid >> /etc/wpa_supplicant.conf
    elif [[ -n $enc ]];then
      wpa_passphrase $essid $enc >> /etc/wpa_supplicant.conf
    fi
  fi
}

start_wpa_supplicant() {
  wpa_supplicant -B -c/etc/wpa_supplicant.conf -i$iface &>/dev/null
}

#------------------------
# Wired dhcp connecction
#------------------------
connect_wired() {
  ensure_root
  assign_arguments "$@"
  verify_iface
  validate_interface
  echo -e "$green[Resetting environment]$reset" && reset_environment
  sleep 1
  echo -e "$green[Putting $iface up]$reset" && set_interface_up
  sleep 1
  echo -e "$green[Acquiring IP address]$reset" && start_dhcpcd
  sleep 1
  test_connection
}

#-----
# Run
#-----
main "$@"
