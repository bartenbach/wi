#!/bin/bash 
#
#  wi - a lightweight network utility for *nix
#  Copyright (C) 2012 Blake Bartenbach
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#-----------
# Variables
#-----------
version='0.0.7-indev'
wi_home="$XDG_CONFIG_HOME/wi"
wi_conf="$wi_home/wi.conf"
iface=''
essid=''
enc=''
color=''
green=''
red=''
yellow=''
reset=''

#------------
# Exit codes
#------------
not_root='10' # User needed to be root and was not
interface_not_found='15' # The interface supplied does not exist
no_arguments='20' # No arguments were supplied
missing_arguments='25' # An argument is missing
no_connection='30' # We exited without obtaining a connection
no_enc='35' # Encryption key was not supplied and is required
cannot_set_interface_down='40' # Shell returned non-zero on set down attempt
cannot_associate_with_essid='50' # Problem associating with the ESSID
cannot_set_interface_up='60' # Shell returned non-zero on set up attempt
cannot_start_dhcpcd='65' # Shell returned non-zero starting dhcpcd
network_not_found='70' # Failed to find ESSID via iwlist scan
cannot_set_wep_key='90' # Unable to set wep key
iwlist_scan_failed='100' # scanning with iwlist failed

#-----------
# Usage
#-----------
function echo_usage {
  echo -e "Usage: wi [arguments]" 
  echo -e "  -o, --open interface essid      Connect to an open or unsecured wireless"
  echo -e "                                  network via dhcp"
  echo -e "  -e, --wep interface essid pass  Connect to a WEP secured network using the"
  echo -e "                                  password 'pass'"
  echo -e "  -a, --wpa interface essid pass  Connect to a WPA secured network using the"
  echo -e "                                  password 'pass' "
  echo -e "  -w, --wired interface           Connect to a wired network using interface"
  echo -e "                                  via dhcp "
  echo -e "  -t, --test                      Check for a current internet connection"
  echo -e "  -s, --scan interface            Scan for wireless networks with interface"
  echo -e "  -h, --help                      Show this menu"
  echo -e "  --version                       Print the current version of wi"
}

function init_color {
  green='\e[0;32m'
  red='\e[0;31m'
  yellow='\e[0;93m'
  reset='\e[0m'  
}

#-----------------
# Parse arguments
#-----------------
parse_arguments_case() { #//TODO why am I using if/else ?
  while :
    do
      case $1 in
      
      esac
    done  
}

parse_arguments() {
  if [[ $1 == '--version' ]];then
    echo "v$version" && exit 0
  elif [[ $1 == '-h' ]] || [[ $1 == '--help' ]];then
    echo_usage && exit 0
  elif [[ $1 == '-s' ]] || [[ $1 == '--scan' ]];then
    [[ -z $2 ]] && exit_noargs $1
    scan $* && exit 0
  elif [[ $1 == '-t' ]] || [[ $1 == '--test' ]];then
    test_connection && exit 0
  elif [[ $1 == '-o' ]] || [[ $1 == '--open' ]];then
    [[ -z $2 ]] || [[ -z $3 ]] && exit_noargs $1
    connect_unsecured_wireless_dhcp $* && exit 0
  elif [[ $1 == '-e' ]] || [[ $1 == '--wep' ]];then
    [[ -z $2 ]] || [[ -z $3 ]] || [[ -z $4 ]] && exit_noargs $1
    connect_wireless_WEP_dhcp $* && exit 0 
  elif [[ $1 == '-a' ]] || [[ $1 == '--wpa' ]];then
    [[ -z $2 ]] || [[ -z $3 ]] && exit_noargs $1
    connect_wireless_wpa_dhcp $* && exit 0 
  elif [[ $1 == '-w' ]] || [[ $1 == '--wired' ]];then
    [[ -z $2 ]] && exit_noargs $1
    connect_wired_dhcp $* && exit 0
  else
    echo_usage && exit $no_arguments
  fi  
}

exit_noargs() {
  echo -e "$yellow[Missing argument for $1 (See wi -h,--help)]$reset" && exit $missing_arguments
}

assign_arguments() {
  iface=$2
  essid=$3
  enc=$4
}

#---------------------
# Interface functions
#---------------------
set_interface_down() {
  ip l s $iface down &>/dev/null && check_exit $cannot_set_interface_down
}

set_interface_up() {
  ip l s $iface up &>/dev/null && check_exit $cannot_set_interface_up
}

associate_with_essid() {
  iwconfig $iface essid $essid &>/dev/null && check_exit $cannot_associate_with_essid
}

start_dhcpcd() {
  dhcpcd -K -A $iface &>/dev/null && check_exit $cannot_start_dhcpcd
}

kill_dhcpcd() {
  pkill -9 dhcpcd &>/dev/null && rm /run/dhcpcd-$iface.pid &>/dev/null
}

isUp() {
  `ip link show up | grep $iface &>/dev/null`
  if [[ $? -ne 0 ]];then
    set_interface_up
    sleep 1
  fi
}

ping_check() {
  ping -c1 -W1 google.com &>/dev/null
}

#------
# Test
#------
test_connection() {
  check_config
  ping_check
  if [[ $? -eq 0 ]];then
    echo -e "$green[Connected]$reset"
  else
    echo -e "$yellow[No connection]$reset"
  fi
}

#----------
# Scan
#----------
scan() {
  assign_arguments $*
  ensure_root && check_exit $not_root
  isUp
  echo -e "$green[Scanning for networks with $iface]$reset"
  iwlist $iface scan | grep ESSID | tr -d [:blank:] | tr -d [\"] #TODO this is totally fucked up
  # this needs to iterate through them one by one and avoid printing empty strings
  # it needs to print out encryption details, and probably some other important data.
  # it should also print nothing if the scan has failed
  check_scan
}

check_scan() {
  if [[ $? -ne 0 ]];then
    echo -e "$green[Scan complete]$reset" && exit 0
  fi
  echo -e "$red[Scan failed]$reset" && exit $iwlist_scan_failed 
}

#--------------------
# Configuration file
#--------------------
check_config() {
  if [[ -r $wi_conf ]]; then
    . $wi_conf
    [[ $color == true ]] && init_color
    return
  fi 
  mkdir -p $wi_home && touch $wi_conf
  write_default_config
  echo -e "$green[Created new configuration file at $wi_conf]$reset"
}

write_default_config() {
  write "#"
  write "# wi.conf - wi configuration file"
  write "#"
  write ""
  write "# use color in terminal messages? true/false"
  write "color=false"
}

write() {
  echo $1 >> $wi_conf  
}

#------------------
# Validation
#------------------
ensure_root() {
  if [[ $EUID -ne 0 ]];then
    echo -e "$yellow[You must be root to manage network interfaces]$reset" && exit $not_root
  fi
}

validate_essid() {
  isUp
  for scanned_essid in `iwlist $iface scan | grep ESSID | tr -d [:blank:] | tr -d [\"]`
    do
      [[ "ESSID:$essid" == "$scanned_essid" ]] && return
    done
  echo -e "$yellow[Network \"${yellow}$essid${red}\" not found]$reset"
  exit $network_not_found
}

validate_interface() {
  ip link show dev $iface &>/dev/null
  [[ $? -eq 0 ]] && return
  echo -e "$yellow[Network interface \"${yellow}$iface$red\" not detected]$reset"
  exit $interface_not_found
}

#--------
# Checks
#--------
check_connectioni() {
  ping_check
  if [[ $? -eq 0 ]];then
    echo -e "$green[Connected to $essid]$reset" && exit 0
  else
    return $no_connection
  fi
}

check_exit() {
  if [[ $? -ne 0 ]];then
    echo -e "$red[Error] exit: $1$reset" && exit $1
  fi
}

#--------------------
# Retry to get an IP //TODO Needs to be tested more
#--------------------
dhcp_persist() {
  let j=1
  while (( j -lt 5 )) && (( $? -gt 0 ))
    do
    echo -e "$yellow[Failed to lease an IP]$reset"
    echo -e "$yellow[Retrying ($j/5)]$reset"
    retry_wireless_dhcp
    ((j+=1))
   done 
}

#------------------------------
# Generic connection functions
#------------------------------
pre_connect() {
  ensure_root && check_config
}

reset_environment() {
  set_interface_down && check_exit $cannot_set_interface_down 
  kill_dhcpcd
}

associate() {
  associate_with_essid && check_exit $cannot_associate_with_essid 
}

put_interface_up() {
  isUp && check_exit $cannot_set_interface_up  
}

retry_if_needed() {
  [[ $? -ne 0 ]] && dhcp_persist    
}

generic_wireless() {
  pre_connect
  validate_interface
  echo -e "$green[Scanning]$reset" && validate_essid
  echo -e "$green[Resetting environment]$reset" && reset_environment
  sleep 1
  echo -e "$green[Associating with $essid]$reset" && associate
  sleep 1
}

#--------------------------
# Wireless dhcp connection
#--------------------------
connect_unsecured_wireless_dhcp() {
  assign_arguments $*
  generic_wireless
  echo -e "$green[Putting $iface up]$reset" && put_interface_up
  sleep 1
  echo -e "$green[Starting dhcp]$reset" && start_dhcpcd
  check_connection
  retry_if_needed
}

retry_wireless_dhcp() {
  validate_essid
  reset_environment
  sleep 1
  associate
  sleep 1
  put_interface_up
  sleep 1
  start_dhcpcd
  check_connection
}

#-------------------------
# Wireless WEP connection
#-------------------------
connect_wireless_WEP_dhcp() {
  assign_arguments $* 
  generic_wireless
  echo -e "$green[Setting WEP encyption]$reset" && set_wep_encryption
  sleep 1
  echo -e "$green[Putting $iface up]$reset" && put_interface_up
  sleep 1
  echo -e "$green[Acquiring an IP address]$reset" && start_dhcpcd
  test_connection
}

set_wep_encryption() {
  iwconfig $iface key $enc &>/dev/null
  check_exit $cannot_set_wep_key
}

#-------------------------
# Wireless WPA connection
#-------------------------
connect_wireless_wpa_dhcp() {
  assign_arguments $*
  generic_wireless
  set_wpa_key
  start_wpa_supplicant
  sleep 1
  put_interface_up
  sleep 1
  echo -e "$green[Acquiring an IP address]$reset"
  start_dhcpcd
  check_connection
  retry_if_needed
}

set_wpa_key() {
  cat /etc/wpa_supplicant.conf | grep $essid &>/dev/null
  if [[ $? != 0 ]];then
    if [[ -z $enc ]];then
      echo -e "$yellow[Encryption key for $essid not found]$reset"
      echo -e "$yellow[Please enter the encryption key for $essid]$reset"
      wpa_passphrase $essid >> /etc/wpa_supplicant.conf
    elif [[ -n $enc ]];then
      wpa_passphrase $essid $enc >> /etc/wpa_supplicant.conf
    fi
  fi
}

start_wpa_supplicant() {
  wpa_supplicant -B -c/etc/wpa_supplicant.conf -i$iface
}

#------------------------
# Wired dhcp connecction
#------------------------
connect_wired_dhcp() {
  assign_arguments $*
  pre_connect
  validate_interface
  echo -e "$green[Resetting environment]$reset" && reset_environment
  sleep 1
  echo -e "$green[Putting $iface up]$reset" && put_interface_up
  sleep 1
  echo -e "$green[Acquiring an IP address]$reset" && start_dhcpcd
  sleep 1
  test_connection
}

#---------------------
#//TODO Progress bar?
#---------------------

#---------------------------------
#//TODO Connectivity testing loop
#---------------------------------

#-----
# Run
#-----
parse_arguments $*
