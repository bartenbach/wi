#!/bin/bash 
#
#  wi - a lightweight network utility for *nix
#  Copyright (C) 2012 Blake Bartenbach
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#-----------
# Arguments
#-----------
args="$#"
arg1="$1"
arg2="$2"
arg3="$3"

#-----------
# Variables
#-----------
version='0.0.5-indev'
wi_home="$XDG_CONFIG_HOME/wi"
wi_conf="$wi_home/wi.conf"
iface=""
essid=""
green='\e[0;32m'
let retries=5
red='\e[0;31m'

#------------
# Exit codes
#------------
not_root='10'
no_arguments='20'
no_connection='30'
cannot_set_interface_down='40'
cannot_associate_with_essid='50'
cannot_set_interface_up='60'
network_not_found='70'

#-----------
# Functions
#-----------
function ensure_root {
  if [[ $EUID != 0 ]];then
    echo -e "${red}You must be root to manage network interfaces"
    exit $not_root
  fi
}

#-----------------
# Parse arguments
#-----------------
function parse_arguments {
  if [[ $arg1 == '--version' ]];then
    echo "wi version $version"
    exit 0
  elif [[ $arg1 == '-s' ]] || [[ $arg1 == '--scan' ]];then
    ensure_root
    if [[ -z $arg2 ]];then
      echo "Usage:            -s, --scan [interface]      Scan for wireless networks with [interface]"
      exit $no_arguments
    else
      iface=$arg2
      echo "[Scanning for networks with $iface]"
      scan
      check_scan
      exit $?;
    fi
  elif [[ $arg1 == '-t' ]] || [[ $arg1 == '--test' ]];then
    test_connection && exit $?
  elif [[ $arg1 == '-c' ]] || [[ $arg1 == '--connect' ]];then
    iface=$arg2
    essid=$arg3
    connect_wireless_dhcp
  else
    echo "Usage: wi [arguments]" 
    echo "  -c, --connect interface essid   Connect to a wireless essid using interface"
    echo "                                  via dhcp"
    echo "  -w, --wired interface           Connect to a wired network using interface "
    echo "                                  via dhcp "
    echo "  -t, --test                      Check for a current internet connection "
    echo "  -s, --scan interface            Scan for wireless networks with interface"
    echo "  -h, --help                      Show this menu"
    echo "  --version                       Print the current version of wi"
    exit $no_arguments
  fi  
}

#---------------------
# Interface functions
#---------------------
function set_interface_down {
  ip l s $iface down >/dev/null 2>&1
}


function set_interface_up {
  ip l s $iface up >/dev/null 2>&1
}

function associate_with_essid {
  iwconfig $iface essid $essid >/dev/null 2>&1
}

function start_dhcpcd {
  dhcpcd -K -A $iface >/dev/null 2>&1
}

function release_dhcpcd {
  dhcpcd -k $iface >/dev/null 2>&1  
}

function kill_dhcpcd {
  pkill -9 dhcpcd >/dev/null 2>&1
  rm /run/dhcpcd-$iface.pid >/dev/null 2>&1  
}

function isUp {
  ip link show up | grep $iface >/dev/null 2>&1
  [[ $? != "0" ]] && set_interface_up
}

function ping_check {
  ping -c1 -W1 http://www.google.com >/dev/null 2>&1
}

#------
# Test
#------
function test_connection {
  ping_check
  if [[ $? == 0 ]];then
    echo -e "$green[Connected]"
    exit 0
  else
    echo -e "$red[No connection]"
    exit $no_connection
  fi
}

#-------
# Check
#-------
function check_connection {
  ping_check
  if [[ $?==0 ]];then
    echo -e "$green[Connected to $essid]"
    exit 0
  else
    return $no_connection
  fi
}

function check_exit {
  [[ $? != 0 ]] && echo -e "$red[Connection failed]$reset exit: $1" && exit $1
}

#----------
# Scanning
#----------
function scan {
  isUp
  iwlist $iface scan | grep --color 'ESSID:"[A-Za-z0-9.]*"$'
  if [[ $? != 0 ]];then
    echo -e "$red[Scan failed]"
    exit 1
  else
    echo -e "$green[Scan complete]"
    exit 0
  fi
}

#--------------------
# Configuration file //TODO unimplemented
#--------------------
function check_config {
  if [[ -f $wi_conf ]]; then
    . $wi_conf
  else 
    echo "[Created new configuration file at $wi_conf]"
    mkdir -p $wi_home
    touch $wi_conf
  fi
}

#------------------
# ESSID validation
#------------------
function validate_essid {
  isUp
  for scanned_essid in `iwlist $iface scan | grep ESSID | tr -d [:blank:] | tr -d [ESSID:] | tr -d [\"]`
    do
      if [[ $essid == $scanned_essid ]];then
        return 
      fi
    done
    echo -e "$red[Network \"$essid\" not found]"
    #//TODO Will hidden networks incorrectly exit with this?
    #FIXME Yup, doesn't work :(
}

#--------------------
# Retry to get an IP //TODO Needs to be tested.
#--------------------
function dhcp_persist {
  let j=1
  while [[ j<=5 ]]
    do
    echo "[Failed to lease an IP]"
    echo "[Retrying ($j/5)]"
    connect_wirelesss_dhcp  
    ((j+=1))
   done 
}

#------------------------------
# Generic connection functions
#------------------------------
function pre_connect {
  ensure_root
  check_config
}

function reset_environment {
  set_interface_down && check_exit $cannot_set_interface_down 
  release_dhcpcd #//TODO need a check_exit here...
  #//TODO associate with a ghost network??
}

function associate {
  associate_with_essid && check_exit $cannot_associate_with_essid 
}

function put_interface_up {
  isUp && check_exit $cannot_set_interface_up  
}

#--------------------------
# Wireless dhcp connection
#--------------------------
function connect_wireless_dhcp {
  pre_connect
  echo "[Scanning]"
  validate_essid
  echo "[Resetting environment]" 
  reset_environment
  sleep 1
  echo "[Associating with $essid]"
  associate
  sleep 1
  echo "[Putting $iface up]" 
  put_interface_up
  sleep 1
  echo "[Starting dhcp]"
  start_dhcpcd
  check_connection
  dhcp_persist
}

#------------------------
# Wired dhcp connecction
#------------------------
function connect_wired_dhcp {
  echo "Unimplemented!  Code it yer self!"  
}

#-------------------------
# Wireless WPA connection
#-------------------------
function connect_wireless_wpa {
  echo "Well...this is going to suck."
}

#---------------------
#//TODO Progress bar?
#---------------------

#---------------------------------
#//TODO Connectivity testing loop
#---------------------------------

#--------------------------------
#//TODO Verify interface exists
#--------------------------------

#-----
# Run
#-----
parse_arguments
